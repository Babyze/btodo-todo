// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: todo.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./utils.pb";

export const protobufPackage = "btodo.todo";

export interface GetTodoListRequest {
  accountID: number;
}

export interface GetTodoListResponse {
  todo: Todo[];
}

export interface Todo {
  todoID: number;
  todoName: string;
  status: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface CreateTodoRequest {
  accountID: number;
  name: string;
}

export interface CreateTodoResponse {
  todoID: number;
  todoName: string;
  status: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface GetTodoRequest {
  accountID: number;
  todoID: number;
}

export interface GetTodoResponse {
  todoID: number;
  todoName: string;
  status: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface DeleteTodoRequest {
  accountID: number;
  todoID: number;
}

export interface DeleteTodoResponse {
  todoID: number;
  todoName: string;
  status: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface CreateTaskRequest {
  todoID: number;
  accountID: number;
  name: string;
}

export interface CreateTaskResponse {
  taskID: number;
  taskName: string;
  status: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface GetTaskListRequest {
  todoID: number;
  accountID: number;
}

export interface GetTaskListResponse {
  tasks: Task[];
}

export interface Task {
  taskID: number;
  taskName: string;
  status: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface UpdateTaskRequest {
  todoID: number;
  accountID: number;
  taskID: number;
  status: number;
}

export interface UpdateTaskResponse {
  taskID: number;
  taskName: string;
  status: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface DeleteTaskRequest {
  todoID: number;
  accountID: number;
  taskID: number;
}

export interface DeleteTaskResponse {
  taskID: number;
  taskName: string;
  status: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export const BTODO_TODO_PACKAGE_NAME = "btodo.todo";

export interface TodoServiceClient {
  getTodoList(request: GetTodoListRequest): Observable<GetTodoListResponse>;

  createTodo(request: CreateTodoRequest): Observable<CreateTodoResponse>;

  getTodo(request: GetTodoRequest): Observable<GetTodoResponse>;

  deleteTodo(request: DeleteTodoRequest): Observable<DeleteTodoResponse>;

  createTask(request: CreateTaskRequest): Observable<CreateTaskResponse>;

  getTaskList(request: GetTaskListRequest): Observable<GetTaskListResponse>;

  updateTask(request: UpdateTaskRequest): Observable<UpdateTaskResponse>;

  deleteTask(request: DeleteTaskRequest): Observable<DeleteTaskResponse>;
}

export interface TodoServiceController {
  getTodoList(
    request: GetTodoListRequest,
  ): Promise<GetTodoListResponse> | Observable<GetTodoListResponse> | GetTodoListResponse;

  createTodo(
    request: CreateTodoRequest,
  ): Promise<CreateTodoResponse> | Observable<CreateTodoResponse> | CreateTodoResponse;

  getTodo(request: GetTodoRequest): Promise<GetTodoResponse> | Observable<GetTodoResponse> | GetTodoResponse;

  deleteTodo(
    request: DeleteTodoRequest,
  ): Promise<DeleteTodoResponse> | Observable<DeleteTodoResponse> | DeleteTodoResponse;

  createTask(
    request: CreateTaskRequest,
  ): Promise<CreateTaskResponse> | Observable<CreateTaskResponse> | CreateTaskResponse;

  getTaskList(
    request: GetTaskListRequest,
  ): Promise<GetTaskListResponse> | Observable<GetTaskListResponse> | GetTaskListResponse;

  updateTask(
    request: UpdateTaskRequest,
  ): Promise<UpdateTaskResponse> | Observable<UpdateTaskResponse> | UpdateTaskResponse;

  deleteTask(
    request: DeleteTaskRequest,
  ): Promise<DeleteTaskResponse> | Observable<DeleteTaskResponse> | DeleteTaskResponse;
}

export function TodoServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getTodoList",
      "createTodo",
      "getTodo",
      "deleteTodo",
      "createTask",
      "getTaskList",
      "updateTask",
      "deleteTask",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TodoService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TodoService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TODO_SERVICE_NAME = "TodoService";
